#!/bin/bash -e
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
[ -x $SCRIPTDIR/configure ] && source $SCRIPTDIR/configure

# Import build definition into the samples templates repo
# This repo can be used unmodified from pac to run pipelines
# PEs can fork, and customize and update for day 2 maintaintainance of the pipelines

if [ -z "$BUILD_DEFINITIONS" ]; then
    BUILD_DEFINITIONS="${1:-$HOME/dev/build-definitions}"
fi
TASKS_CATALOG_EXPORT=$(realpath $SCRIPTDIR/../tasks)
PIPELINES_CATALOG_EXPORT=$(realpath $SCRIPTDIR/../pipelines)
DEFAULT_EXPORT=$(realpath $SCRIPTDIR/../pac)
if [ -z "$EXPORT_DIR" ]; then
    EXPORT_DIR="${2:-$DEFAULT_EXPORT}"
fi

echo "Import Pipelines From $BUILD_DEFINITIONS"
echo "Copy Pipelines Into $EXPORT_DIR"

IMPORT_TASKS_DIR=${BUILD_DEFINITIONS}/task
IMPORT_PIPELINES_DIR=${BUILD_DEFINITIONS}/pipelines

OUTPUT_TASKS_DIR=$EXPORT_DIR/tasks
OUTPUT_PIPELINES_DIR=$EXPORT_DIR/pipelines

rm -rf $OUTPUT_TASKS_DIR
mkdir -p $OUTPUT_TASKS_DIR  


if [ -d $IMPORT_PIPELINES_DIR/rhtap ]; then
  echo "Using RHTAP from Build definitions"
  IMPORT_PIPELINES_DIR="$IMPORT_PIPELINES_DIR/rhtap"
else
  echo "Failed to find rhtap pipelines at $IMPORT_PIPELINES_DIR/rhtap"
  exit 1
fi 

CREATE_CATALOG=false 
rm -rf $PIPELINES_CATALOG_EXPORT 
rm -rf $TASKS_CATALOG_EXPORT 
if [ $CREATE_CATALOG == "true" ]; then
  mkdir -p $PIPELINES_CATALOG_EXPORT 
  mkdir -p $TASKS_CATALOG_EXPORT 
fi 

for pipeline in $OUTPUT_PIPELINES_DIR/* ;  do
  echo
  echo $pipeline  
  if [ $CREATE_CATALOG == "true" ]; then 
    echo "Catalog "  
    cp -r $IMPORT_TASKS_DIR/$task/ $TASKS_CATALOG_EXPORT/$task
  fi 
  TASKS=$(yq .spec.tasks.[].taskRef.name $pipeline )  
  FINALLY=$(yq .spec.finally.[].taskRef.name $pipeline )
  # Temporarily keep some to ensure existing templates work
  # until they have been merged for backwards compatibilty  
  KEEP=""
  
  echo "Tasks referenced from $(basename $pipeline):" 
  for task in $TASKS $FINALLY $KEEP
  do  
    if [ $CREATE_CATALOG == "true" ]; then 
      echo "Catalog "  
      cp -r $IMPORT_TASKS_DIR/$task/ $TASKS_CATALOG_EXPORT/$task
    fi 
 
    VERSIONDIR=$(ls -d $IMPORT_TASKS_DIR/$task/*/ | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n | tail -n1)
    echo " $task in $task.yaml" 
    if [ -f $VERSIONDIR/$task.yaml ]; then
      cp $VERSIONDIR/$task.yaml $OUTPUT_TASKS_DIR/$task.yaml
    elif [ -f $VERSIONDIR/kustomization.yaml ]; then
      kustomize build $VERSIONDIR > $OUTPUT_TASKS_DIR/$task.yaml
    else
      echo Unable to apply task in $VERSIONDIR
    fi 
  done 
done 
 
bash $SCRIPTDIR/patch-tasks
