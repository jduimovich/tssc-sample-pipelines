apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: acs-deploy-check
spec:
  description: >-
    Policy check a deployment with StackRox/RHACS This tasks allows you to check
    a deployment against build-time policies and apply enforcement to fail
    builds. It's a companion to the stackrox-image-scan task, which returns full
    vulnerability scan results for an image.
  params:
    - name: rox-secret-name
      type: string
      description: |
        Secret containing the StackRox server endpoint and API token with CI permissions under rox-api-endpoint and rox-api-token keys.
        For example: rox-api-endpoint: rox.stackrox.io:443 ; rox-api-token: eyJhbGciOiJS...
    - name: gitops-repo-url
      type: string
      description: URL of gitops repository to check.
    - name: verbose
      type: string
      default: 'true'
    - name: insecure-skip-tls-verify
      type: string
      default: 'false'
      description: |
        When set to `"true"`, skip verifying the TLS certs of the Central
        endpoint.  Defaults to `"false"`.
  volumes: 
    - name: rox-secret
      secret:
        secretName: $(params.rox-secret-name)
        optional: true
  steps:
  - name: annotate-task
    image: registry.redhat.io/openshift4/ose-cli:4.13@sha256:73df37794ffff7de1101016c23dc623e4990810390ebdabcbbfa065214352c7c
    script: |
      #!/usr/bin/env bash   
      echo "acs-deploy-check $(context.taskRun.name)" 
      oc annotate taskrun $(context.taskRun.name) task.results.format=application/json
      oc annotate taskrun $(context.taskRun.name) task.results.type=roxctl-deployment-check 
      oc annotate taskrun $(context.taskRun.name) task.output.location=logs
      oc annotate taskrun $(context.taskRun.name) task.results.container=step-report
  - name: rox-deploy-scan
    image: quay.io/redhat-appstudio/task-toolset@sha256:931a9f7886586391ccb38d33fd15a47eb03568f9b19512b0a57a56384fa52a3c
    volumeMounts:
      - name: rox-secret
        mountPath: /rox-secret
    workingDir: /workspace/repository
    env:
      - name: PARAM_INSECURE_SKIP_TLS_VERIFY
        value: $(params.insecure-skip-tls-verify)
    script: |
      #!/usr/bin/env bash
      set +x

      function set_test_output_result() {
        local date=$(date +%s)
        local result=${1:-ERROR}
        local note=$2
        local successes=${3:-0}
        local failures=${4:-0}
        local warnings=${5:-0}
        echo "{\"result\":\"${result}\",\"timestamp\":\"${date}\",\"note\":\"${note}\",\"namespace\":\"default\",\"successes\":\"${successes}\",\"failures\":\"${failures}\",\"warnings\":\"${warnings}\"}" 
      }

      # Check if rox API enpoint is configured
      if test -f /rox-secret/rox-api-endpoint ; then
        export ROX_CENTRAL_ENDPOINT=$(</rox-secret/rox-api-endpoint)
      else
        echo "rox API endpoint is not set, demo will exit with success"
        echo "TODO: configure the pipeline with your ACS server domain. Set your ACS endpoint under 'rox-api-endpoint' key in the secret specified in rox-secret-name parameter. For example: 'rox.stackrox.io:443'"
        set_test_output_result SKIPPED "Task $(context.task.name) skipped: ACS API enpoint not specified"
        exit 0
      fi

      # Check if rox API token is configured
      if test -f /rox-secret/rox-api-token ; then
        export ROX_API_TOKEN=$(</rox-secret/rox-api-token)
      else
        echo "rox API token is not set, demo will exit with success"
        echo "TODO: configure the pipeline to have access to ROXCTL. Set you ACS token under 'rox-api-token' key in the secret specified in rox-secret-name parameter."
        set_test_output_result SKIPPED "Task $(context.task.name) skipped: ACS API token not provided"
        exit 0
      fi

      echo "Using rox central endpoint ${ROX_CENTRAL_ENDPOINT}"

      # Clone gitops repository
      git clone $(params.gitops-repo-url) --single-branch --depth 1 gitops
      cd gitops

      echo "Configuration"
      echo "Directory = $(pwd)"
      ls -al

      if [ "${PARAM_INSECURE_SKIP_TLS_VERIFY}" = "true" ] ; then
        curl_insecure='--insecure'
      fi
      curl $curl_insecure -s -L -H "Authorization: Bearer $ROX_API_TOKEN" \
        "https://${ROX_CENTRAL_ENDPOINT}/api/cli/download/roxctl-linux" \
        --output ./roxctl  \
        > /dev/null
      if [ $? -ne 0 ]; then
        note='Failed to download roxctl'
        echo $note
        set_test_output_result ERROR "$note"
        exit 1
      fi
      chmod +x ./roxctl  > /dev/null
   
      low_total=0
      for component in components/*; do
        echo $component
        if [ -f $component/base/deployment.yaml ]; then
          echo "ROXCTL on $component/base/deployment.yaml"
          ./roxctl deployment check \
            $( [ "${PARAM_INSECURE_SKIP_TLS_VERIFY}" = "true" ] && \
            echo -n "--insecure-skip-tls-verify") \
            -e "${ROX_CENTRAL_ENDPOINT}" --file "$component/base/deployment.yaml" --output json \
            > /tmp/roxctl_deployment_check_output.txt
          cat /tmp/roxctl_deployment_check_output.txt > /workspace/repository/deploy-check
        fi
      done 
  - name: report
    image: registry.redhat.io/openshift4/ose-cli:4.13@sha256:73df37794ffff7de1101016c23dc623e4990810390ebdabcbbfa065214352c7c
    script: |
      #!/usr/bin/env bash 
      cat /workspace/repository/deploy-check
  workspaces:
  - description: The git repo will be cloned onto the volume backing this Workspace.
    name: repository